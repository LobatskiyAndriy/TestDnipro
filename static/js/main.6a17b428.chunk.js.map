{"version":3,"sources":["components/controls/Button/Button.jsx","components/controls/index.jsx","components/controls/Input/Input.jsx","components/controls/RadioGroup/RadioGroup.jsx","components/controls/Autocomplete/Autocomlete.jsx","components/controls/SelectAsync/SelectAsync.jsx","components/GroupForm/GroupForm.jsx","Api/utils.js","Api/index.js","Api/Client.js","Api/Applicant.js","components/ListAplicants/ListAplicants.jsx","components/SmalInfoUser/SmalInfoUser.jsx","components/ClientsChange/ClientsChange.jsx","components/AddFormAplicants/listCountry.js","components/AddFormAplicants/const.js","components/AddFormAplicants/AddFormAplicants.jsx","scenss/MainScens/MainScens.jsx","App.js","theme.js","index.js"],"names":["useStyles","makeStyles","theme","root","margin","spacing","label","textTransform","Controls","Input","props","useField","field","meta","TextField","touched","error","helperText","RadioGroup","Props","items","FormControl","FormLabel","map","item","FormControlLabel","value","id","control","Radio","color","title","Fragment","Autocomlete","name","options","getOptionLabel","noOptionsText","variant","other","render","form","Autocomplete","onChange","e","setFieldValue","renderInput","params","component","SelectAsync","Button","children","size","onClick","classes","breakpoints","up","padding","marginBottom","marginTop","GroupForm","Paper","className","defaultProps","apiRequest","axios","create","baseURL","authRequest","config","withAuthTokenConfig","mergeDeepLeft","headers","Api","getClients","method","url","getClientApplicants","listText","fontSize","ListAplicants","dataForm","setDataForm","useState","aplicants","setAplicants","useEffect","clienId","Promise","all","then","results","data","onChangeItem","target","checked","tempArray","applicantsIds","push","String","index","indexOf","splice","FormGroup","Checkbox","Typography","address","newApplicants","disabled","codeId","originalName","codeID","IconButton","filter","deteleateAplication","aria-label","fontWeight","SmalInfoUser","phone","ClientsChange","initialStateForm","showOptions","setShowOptions","clients","setClients","activeClient","setActiveClient","handleInputChange","event","length","option","newValue","userInfo","R","adrrees","email","Country","typeUser","nameErrors","initialValues","code","country","EDRPOU","originalAddress","validChem","Yup","required","when","is","otherwise","maxWidth","inputBox","width","down","AddFormAplicants","setShowAddForm","validationSchema","onSubmit","values","setSubmitting","uuid","FormUser","row","wrapSelect","Grid","container","xs","md","type","MainScens","showAddForm","showJson","setShowJson","Container","endIcon","style","overflow","JSON","stringify","App","createMuiTheme","palette","primary","main","ReactDOM","ThemeProvider","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.6a17b428.chunk.js","sourcesContent":["import React from 'react'\nimport { Button as MuiButton, makeStyles } from '@material-ui/core'\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        margin: theme.spacing(0.5)\n    },\n    label: {\n        textTransform: 'none'\n    }\n}))\n\nexport const Button = (props) => {\n\n    const { children, size, color, variant, onClick, ...other } = props;\n    const classes = useStyles()\n\n    return (\n        <MuiButton\n            variant={variant || \"contained\"}\n            size={size || \"large\"}\n            color={color || \"primary\"}\n            onClick={onClick}\n            {...other}\n            classes={{ root: classes.root, label: classes.label }}\n        >\n            {children}\n        </MuiButton>\n    )\n}\n","import { Input } from './Input/Input'\nimport { RadioGroup } from './RadioGroup/RadioGroup'\nimport { Autocomlete } from './Autocomplete/Autocomlete'\nimport { SelectAsync } from './SelectAsync/SelectAsync'\nimport { Button } from './Button/Button'\n\n const Controls = {\n    Input,\n    RadioGroup,\n    Autocomlete,\n    SelectAsync,\n    Button,\n}\n\nexport default Controls;","import {   TextField } from '@material-ui/core'\nimport { useField } from 'formik';\nimport React from 'react'\n\n \n\nexport const Input = ({  ...props }) => {\n    const [field, meta] = useField(props);\n    \n    return (\n        <TextField\n       \n            {...props}\n            {...field}\n            {...(meta.touched && meta.error && { error: true, helperText: meta.error })}\n        >\n        </TextField >\n    )\n}\n\n\n","import React from 'react'\nimport { FormControl, FormControlLabel, FormLabel, RadioGroup as MuiRadioGroup, Radio } from '@material-ui/core';\nimport { useField } from 'formik';\n\n\nexport const RadioGroup = (Props) => {\n\n    // const { name, label, onChange, items } = props;\n    const [field, meta] = useField(Props);\n     \n    const { label, items } = Props;\n\n    return (\n        <FormControl>\n            <FormLabel>{label}</FormLabel>\n            <MuiRadioGroup  {...field} {...Props}  >\n                {\n                    items.map(\n                        (item) => (\n                            <FormControlLabel key={item.id} value={item.id} control={<Radio color=\"primary\" />} label={item.title} />\n                        )\n                    )\n                }\n\n            </MuiRadioGroup>\n            {meta.touched && meta.error && (\n                <React.Fragment>{meta.error}</React.Fragment>\n            )}\n\n        </FormControl>\n    )\n}\n\n\n// const MyCheckbox = ({ children, ...props }) => {\n//     // React treats radios and checkbox inputs differently other input types, select, and textarea.\n//     // Formik does this too! When you specify `type` to useField(), it will\n//     // return the correct bag of props for you\n//     const [field, meta] = useField({ ...props, type: 'checkbox' });\n//     return (\n//         <div>\n//             <label className=\"checkbox\">\n//                 <input type=\"checkbox\" {...field} {...props} />\n//                 {children}\n//             </label>\n\n//             {meta.touched && meta.error ? (\n//                 <div className=\"error\">{meta.error}</div>\n//             ) : null}\n//         </div>\n//     );\n// };\n\n// const FormikRadioGroup = ({\n//     field,\n//     form: { touched, errors },\n//     name,\n//     options,\n//     ...props\n// }) => {\n\n//     return (\n//         <React.Fragment>\n//             <RadioGroup {...field} {...props} name={name}>\n//                 {options.map(option => (\n//                     <FormControlLabel value={option} control={<Radio />} label={option} />\n//                 ))}\n//             </RadioGroup>\n\n//             {touched[fieldName] && errors[fieldName] && (\n//                 <React.Fragment>{errors[fieldName]}</React.Fragment>\n//             )}\n//         </React.Fragment>\n//     );\n// };","import { TextField } from '@material-ui/core'\nimport { Autocomplete } from '@material-ui/lab';\n\nimport { Field } from 'formik';\n\nimport React from 'react'\n\nexport const Autocomlete = (props) => {\n    const { name, id, options, getOptionLabel, noOptionsText, variant, ...other } = props;\n   \n    return (\n        <Field\n            id={id}\n            name={name}\n            render={({ field, form, meta }) => {\n\n                return (\n                    <>\n                        <Autocomplete\n                            {...other}\n                            options={options}\n                            getOptionLabel={getOptionLabel}\n                            noOptionsText={noOptionsText}\n                            onChange={(e, value) => {\n                                form.setFieldValue(name, !!value && !!value.value ? value.value : '')\n                            }}\n                            renderInput={params => (\n                                <Field component={TextField} label=\"Вибір країни \"  {...params} variant={variant} {...(meta.touched && meta.error && { error: true, helperText: meta.error })} />\n                            )}\n                        />\n                    </>\n                )\n            }}\n\n        />\n\n\n    )\n}\n\n\n","import React from 'react'\n\nexport const SelectAsync = () => {\n    return (\n        <div>\n            \n        </div>\n    )\n}","import { makeStyles, Paper } from '@material-ui/core';\nimport propTypes from 'prop-types';\nimport React from 'react'\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        [theme.breakpoints.up('xs')]: {\n            padding: theme.spacing(2),\n            marginBottom: theme.spacing(2),\n            marginTop: theme.spacing(2),\n        },\n\n        [theme.breakpoints.up('sm')]: {\n            padding: theme.spacing(4),\n            margin: theme.spacing(4),\n        },\n    },\n    title: {\n        margin:0,\n        marginBottom:5\n    }\n}));\n\nexport const GroupForm = (Props) => {\n    const classes = useStyles();\n\n    const { children, title } = Props;\n    return (\n        <Paper className={classes.root} >\n            <h2 className={classes.title}>{title}</h2>\n            <div>{children}</div>\n        </Paper>\n    )\n}\n\nGroupForm.defaultProps = {\n    title: \"Назва тестова\",\n};\n\nGroupForm.propTypes = {\n    title: propTypes.string.isRequired,\n    children: propTypes.node.isRequired,\n}","import axios from 'axios';\nimport { mergeDeepLeft } from 'ramda';\n\n \nconst apiBaseUrl = 'http://lexberry.com.ua/api/v1';\nconst token = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE2MDc0NjEyMDMsImV4cCI6MTYxMDA1MzIwMywicm9sZXMiOlsiUk9MRV9BRE1JTiJdLCJ1c2VybmFtZSI6ImJ5Lmhhc2tlbGwifQ.F_0yZmAbIbPuonnXiKdxI9ne77y3CCFmoe-Wygp3wIgXShDoO64cnnTBsVQG6u6VUvZt1LrueXhUnbOmVKnbUTckKKkNcQWl6iHVO-9RgP2133SOzWcSmVDpf0BC_K0lczF0DaAmp1gHii-Ct50nORpSONSbWNnjkfhBIPbyLVDR2sKuGKyMGG-6Qy0JRDTFnt5AVO_z5HEpCYSrQdhwd_wl7gcD9-vH7_aQib9dq6htbDdqdFw1NXk84B_YTfa2szSFyMDuQkaTgXZwoOOouxEHy9JlJgkKgxK5W-f84cNFkFrYxUhxaNROgPFY8Cs9pB54NcVaSceQc2vF2lgtFb3VyC-ra3xTNtrNmzGPpikftkeU8lnojP8ifEsdeYWjgJGUa7HsR-VMq2fN9otGd0PqpXLpXPasBXEvub7tRyqLziGUG_h4SdgIOu0aGe3sItigzF3fnaCc-Vv8B1wM_qt05ahCgdMuMD7X2dW0eAFuO8zKZszz7owiD5S92QiJkI2sGUG5YzPTOPjch-Qoax--aM1QE8XFDvkDYCruARDTBxcqNp6QAdEANr_toscUpcwTM5-hNfSTGaWvF0dkJaek2PCCszOWAyz6TiLy9lGXVkFEGn-qeR9V0ecdHNx9F_6YNqgWAIOlMNCsYiNp77J6ggmLjJZfTYDh6BAwFNI'\n\nexport const apiRequest = axios.create({\n    baseURL: apiBaseUrl,\n});\n\nexport const authRequest = (config) => {\n\n    const withAuthTokenConfig = mergeDeepLeft(\n        config,\n        { headers: { \"Authorization\": `Bearer ${token}` } },\n    );\n\n    return apiRequest(withAuthTokenConfig);\n};\n","import {getClients}  from './Client';\nimport {getClientApplicants}  from './Applicant';\n\n \n const Api = {\n    getClients,\n    getClientApplicants,\n}\n\nexport default Api;","import { authRequest } from './utils';\n\nexport const getClients = () => {\n    return authRequest({\n        method: 'GET',\n        url: `/clients`,\n    });\n};","import { authRequest } from './utils';\n\nexport const getClientApplicants = (id) => {\n  return authRequest({\n    method: 'GET',\n    url: `/applicants?filter[client:id]=${id}`,\n  });\n};","import { Checkbox, FormControlLabel, FormGroup, IconButton, makeStyles, Typography } from '@material-ui/core'\nimport React, { useEffect, useState } from 'react'\n\nimport Api from '../../Api'\n\nimport DeleteIcon from '@material-ui/icons/Delete';\n \nconst useStyles = makeStyles((theme) => ({\n    listText: {\n        [theme.breakpoints.up('xs')]: {\n            fontSize: '0.85rem'\n        },\n        [theme.breakpoints.up('sm')]: {\n            fontSize: '1rem'\n        },\n    },\n}));\n\nexport const ListAplicants = ({ ...props }) => {\n\n    const classes = useStyles();\n\n    const { dataForm, setDataForm } = props;\n    const [aplicants, setAplicants] = useState([]);\n\n    useEffect(() => {\n        if (!!dataForm.clienId) {\n\n            Promise.all([\n                Api.getClientApplicants(dataForm.clienId),\n            ]).then((results) => {\n                setAplicants(results[0].data.items);\n            });\n        }\n    }, [dataForm.clienId])\n\n    const onChangeItem = (e) => {\n        if (e.target.checked) {\n            let tempArray = dataForm.applicantsIds;\n            tempArray.push(String(e.target.value));\n            setDataForm({\n                ...dataForm,\n                applicantsIds: tempArray\n            })\n        } else {\n            let tempArray = dataForm.applicantsIds;\n            const index = tempArray.indexOf(e.target.value);\n            if (index > -1) {\n                tempArray.splice(index, 1);\n            }\n            setDataForm({\n                ...dataForm,\n                applicantsIds: tempArray\n            })\n        }\n    }\n\n    const deteleateAplication = (id) => {\n        let tempArray = [];\n        tempArray = dataForm.newApplicants.filter(item => {\n            return item.codeID !== id\n        })\n\n        setDataForm({\n            ...dataForm,\n            newApplicants: tempArray\n        })\n\n    }\n\n    return (\n        <div>\n            <FormGroup>\n                {aplicants.map(item => (\n                    <FormControlLabel key={`${item.id}${item.name}`}\n                        control={<Checkbox value={item.id} color=\"primary\" onChange={onChangeItem} />}\n                        label={<Typography className={classes.listText} > <b>{item.name},</b>  {item.address.address}</Typography>}\n                    />\n                ))}\n                {!!dataForm && !!dataForm.newApplicants && dataForm.newApplicants.map(item => {\n \n                    return (\n                        <div>\n                            <FormControlLabel key={`${item.codeID}${item.name}`} disabled\n                                control={<Checkbox checked={true} value={item.codeId} color=\"primary\" onChange={onChangeItem} />}\n                                label={<Typography className={classes.listText} > <b>{item.name},</b>  {item.originalName}</Typography>}\n                            />\n\n                            <IconButton onClick={() => deteleateAplication(item.codeID)} aria-label=\"delete\" >\n                                <DeleteIcon fontSize=\"small\" />\n                            </IconButton>\n                        </div>\n                    )\n                })}\n            </FormGroup>\n        </div>\n    )\n}\n\n","import React from 'react'\nimport propTypes from 'prop-types';\nimport { makeStyles, Typography } from '@material-ui/core';\n\n\nconst useStyles = makeStyles((theme) => ({\n    title:{\n        fontWeight:'bold'\n    }\n   \n}));\n\n\nexport const SmalInfoUser = (Props) => {\n    const classes = useStyles();\n\n    const {name,phone} = Props;\n    return (\n        <div  >\n            <Typography className={classes.title} component=\"h6\">{name}</Typography>\n            <Typography>Телефон: {phone}</Typography>\n        </div>\n    )\n}\n\nSmalInfoUser.defaultProps = {\n    name: \"Назва тестова\",\n    phone: \"Телефон. 0000000000\",\n};\n\nSmalInfoUser.propTypes = {\n    name: propTypes.string,\n    phone: propTypes.string,\n}","import {   TextField } from '@material-ui/core';\nimport { Autocomplete } from '@material-ui/lab';\nimport React, { useEffect, useState } from 'react'\nimport Api from './../../Api'\nimport * as R from 'ramda'\nimport { SmalInfoUser } from '../SmalInfoUser/SmalInfoUser';\n\n\n\n\n\nexport const ClientsChange = ({ ...props }) => {\n\n    const { initialStateForm, dataForm, setDataForm } = props;\n\n    const [showOptions, setShowOptions] = useState(false)\n    const [clients, setClients] = useState()\n\n    const [activeClient, setActiveClient] = useState();\n\n    useEffect(() => {\n        Promise.all([\n            Api.getClients(),\n        ]).then((results) => {\n            let tempArray = []\n            tempArray = results[0].data.items.map((item) => {\n                return {\n                    ...item,\n                    value: item.id\n                }\n            })\n            setClients(tempArray);\n        });\n    }, [])\n\n\n    function handleInputChange(event) {\n        const querySearch = event.target.value;\n        if (querySearch.length > 2) {\n            setShowOptions(true);\n        }\n    }\n\n    function onChangeClient(event, newValue) {\n\n        if (!!newValue) {\n\n            setDataForm({\n                applicantsIds: [],\n                newApplicants: [],\n                clienId: newValue.id,\n            })\n            let userInfo = R.find(R.propEq('id', newValue.id))(clients);\n            setActiveClient(userInfo);\n        } else {\n            setDataForm(initialStateForm)\n            setActiveClient();\n        }\n\n    }\n    return (\n        <div >\n            <Autocomplete\n                options={showOptions ? clients : []}\n                getOptionLabel={(option) => option.label}\n                noOptionsText={showOptions ? 'Нічого не знайдено' : 'Ведіть більше трьох символів'}\n                onChange={onChangeClient}\n                renderInput={(params) => <TextField {...params} onChange={handleInputChange} label=\"Custom Search/Sections\" margin=\"normal\" />}\n            />\n\n            {!!dataForm.clienId && (\n                <SmalInfoUser name={activeClient.name} phone={activeClient.phone} adrrees={activeClient.email}></SmalInfoUser>\n            )}\n\n        </div>\n    )\n}\n","export const Country = [\n    {\"title\": \"Польща\", \"value\": \"Poland\"},\n    {\"title\": \"Бельгія\", \"value\": \"Belgium\"},\n    {\"title\": \"Нідерланди\", \"value\": \"Netherlands\"},\n    {\"title\": \"Україна\", \"value\": \"Ukraine\"},\n    \n]","export const typeUser = [\n    { id: 'Individual', title: 'Фізична особа' },\n    { id: 'Legal', title: 'Юридична особа' },\n]\n\nexport const nameErrors = {\n    code: \"Виберіть тип платника подітків\",\n    country: \"Виберіть країну\",\n    EDRPOU: \"Виберіть Код ЕДРПОУ\",\n    name: \"Ведіть назву\",\n    address: \"Ведіть адресу\",\n    originalName: \"Ведіть назву мовою можодження\",\n    originalAddress: \"Ведіть адресу мовою можодження\",\n}\n","import { Grid, makeStyles, Typography } from '@material-ui/core'\n\nimport React from 'react'\nimport Controls from './../../components/controls';\nimport { Country } from './listCountry.js'\n\nimport { Formik, Form } from 'formik';\nimport * as Yup from 'yup';\n\nimport { uuid } from 'uuidv4';\nimport { nameErrors, typeUser } from './const';\n\n\nconst initialValues = {\n    code: \"Individual\",\n    country: \"\",\n    EDRPOU: \"\",\n    name: \"\",\n    address: \"\",\n    originalName: \"\",\n    originalAddress: \"\",\n}\n\n\nconst validChem = Yup.object({\n    code: Yup.string().required(nameErrors.code),\n    country: Yup.string().required(nameErrors.country),\n    name: Yup.string().required(nameErrors.name),\n    address: Yup.string().required(nameErrors.address),\n    originalAddress: Yup\n        .string()\n        .when(\"country\", {\n            is: \"Ukraine\",\n            then: \"\",\n            otherwise: Yup.string().required(nameErrors.originalAddress)\n        }),\n\n    originalName: Yup\n        .string()\n        .when(\"country\", {\n            is: \"Ukraine\",\n            then: \"\",\n            otherwise: Yup.string().required(nameErrors.originalAddress)\n        }),\n})\n\nconst useStyles = makeStyles((theme)=>({\n    form: {\n        marginTop: 10,\n        marginBottom: 20,\n        '& .MuiAutocomplete-root': {\n            maxWidth: 400\n        }\n    },\n\n    inputBox: {\n        maxWidth: \"90%\",\n        width: \"100%\",\n        marginTop: 5,\n        marginBottom: 5,\n\n        [theme.breakpoints.down('sm')]: {\n            maxWidth: \"100%\",\n        },\n    }\n}));\n\n\nexport const AddFormAplicants = (props) => {\n    const classes = useStyles()\n    const { setDataForm, dataForm, setShowAddForm } = props;\n\n    return (\n        <div className={classes.form} >\n            <Typography variant=\"h6\">Додати нового</Typography>\n            <Formik\n                initialValues={initialValues}\n                validationSchema={validChem}\n                onSubmit={(values, { setSubmitting }) => {\n\n\n                    let tempArray = []\n                    tempArray = dataForm.newApplicants.map((item) => item)\n                    values.codeID = uuid();\n                    tempArray.push(values);\n\n\n                    setDataForm({\n                        ...dataForm,\n                        newApplicants: tempArray\n                    })\n                    tempArray = [];\n\n                    setShowAddForm(false);\n                }}\n                children={FormUser}\n\n            >\n            </Formik>\n\n        </div>\n    )\n}\n\n\n\nexport const FormUser = ({ ...props }) => {\n    const classes = useStyles()\n    const { values } = props;\n \n    return (\n        <Form>\n            <Controls.RadioGroup\n                row\n                id=\"code\"\n                name=\"code\"\n                items={typeUser}\n\n            ></Controls.RadioGroup>\n            <Controls.Autocomlete\n                className={classes.wrapSelect}\n                id=\"country\"\n                name=\"country\"\n                options={Country}\n                getOptionLabel={(Country) => Country.title}\n                noOptionsText={'Ведіть країну'}\n                variant=\"standard\"\n            ></Controls.Autocomlete>\n            <Grid container >\n                <Grid item xs={12} md={6}>\n                    <Controls.Input\n                        className={classes.inputBox}\n                        id=\"EDRPOU\"\n                        label=\"ЕДРПОУ\"\n                        variant=\"standard\"\n                        name=\"EDRPOU\"\n                    ></Controls.Input>\n                    <Controls.Input\n                        className={classes.inputBox}\n                        id=\"name\"\n                        label=\"Назва\"\n                        variant=\"standard\"\n                        name=\"name\"\n                    ></Controls.Input>\n                    <Controls.Input\n                        className={classes.inputBox}\n                        id=\"address\"\n                        label=\"Адреса\"\n                        variant=\"standard\"\n                        name=\"address\"\n                    ></Controls.Input>\n                </Grid>\n\n                {!!values.country && values.country !== \"Ukraine\" && (\n                    <Grid item xs={12} md={6}>\n                        <Controls.Input\n                            className={classes.inputBox}\n                            label=\"Назва мови походження\"\n                            variant=\"standard\"\n                            name=\"originalName\"\n                        ></Controls.Input>\n                        <Controls.Input\n                            className={classes.inputBox}\n                            label=\"Адреса мовою походження\"\n                            variant=\"standard\"\n                            name=\"originalAddress\"\n                        ></Controls.Input>\n                    </Grid>\n                )}\n            </Grid>\n\n            <Controls.Button\n                type=\"submit\"\n                variant=\"outlined\"\n                color=\"primary\"\n            > Додати заявника</Controls.Button>\n        </Form>\n\n    )\n}","import React, { useState } from 'react'\n\nimport { Button, Container, Grid } from '@material-ui/core'\nimport AddIcon from '@material-ui/icons/Add';\n\nimport Controls from '../../components/controls'\n\nimport { GroupForm } from '../../components/GroupForm/GroupForm'\nimport { ListAplicants } from '../../components/ListAplicants/ListAplicants'\nimport { ClientsChange } from '../../components/ClientsChange/ClientsChange'\nimport { AddFormAplicants } from '../../components/AddFormAplicants/AddFormAplicants'\n\nconst initialStateForm = {\n    clienId: \"\",\n    applicantsIds: [],\n    newApplicants: []\n}\n\nexport const MainScens = () => {\n\n    const [dataForm, setDataForm] = useState(initialStateForm)\n    const [showAddForm, setShowAddForm] = useState(false);\n    const [showJson, setShowJson] = useState(false);\n\n    const showForm = () => {\n        setShowAddForm(!showAddForm)\n    }\n\n    const formSubmit = () => {\n        setShowJson(!showJson)\n    }\n\n    const getJsonIndented = (data) => JSON.stringify(data, null, 2) ;\n\n    return (\n        <div>\n            <Container maxWidth=\"md\">\n\n                <GroupForm title=\"Клієнт\" >\n                    <ClientsChange dataForm={dataForm} initialStateForm={initialStateForm} setDataForm={setDataForm} ></ClientsChange>\n                </GroupForm>\n\n                {!!dataForm.clienId && (\n                    <GroupForm title=\"Замовник\">\n                        <Grid container>\n                            <Grid container item xs={12}  >\n                                <ListAplicants dataForm={dataForm} setDataForm={setDataForm}   ></ListAplicants>\n                            </Grid>\n                            <Grid item xs={12}  >\n                                <Button\n                                    variant=\"outlined\"\n                                    color=\"primary\"\n                                    endIcon={<AddIcon></AddIcon>}\n                                    onClick={showForm}\n                                    size=\"medium\"\n                                >\n                                    {!showAddForm?'Додати':'Cховати форму'}\n                                    </Button>\n\n                                {!!showAddForm && <AddFormAplicants setShowAddForm={setShowAddForm} setDataForm={setDataForm} dataForm={dataForm}></AddFormAplicants>}\n                            </Grid>\n                            <Grid container item xs={12}  >\n\n                                <Controls.Button onClick={formSubmit}>Зберегти заявку</Controls.Button>\n                            </Grid>\n                        </Grid>\n                    </GroupForm>\n                )}\n\n                {!!showJson && (<GroupForm    title='Json запиту'>\n                    <pre style={{ overflow: \"auto\" }} >{getJsonIndented(dataForm)}</pre>\n                </GroupForm>)}\n\n            </Container>\n\n        </div >\n    )\n}\n","\nimport './App.css';\nimport { MainScens } from './scenss/MainScens/MainScens';\n\n\nfunction App() {\n  return (\n    <>\n\n      <MainScens></MainScens>\n\n    </>\n  );\n}\n\nexport default App;\n","import { createMuiTheme } from \"@material-ui/core\";\n\n\n\n\n// const value in theme\nexport const paramsThem = {\n    color:{\n        main:'#2196f3'\n    }\n}\n\n\n\nexport const theme = createMuiTheme({\n    palette: {\n        primary:{\n            main: paramsThem.color.main\n        },\n    },\n});\n\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { CssBaseline, ThemeProvider } from '@material-ui/core';\nimport { theme } from './theme';\n\n\nReactDOM.render(\n  <ThemeProvider theme={theme}>\n    <App />\n    <CssBaseline></CssBaseline>\n  </ThemeProvider>\n  ,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}