{"version":3,"sources":["redax/actions/users.js","components/controls/Button/Button.jsx","components/controls/index.jsx","components/controls/Input/Input.jsx","components/controls/RadioGroup/RadioGroup.jsx","components/controls/Autocomplete/Autocomlete.jsx","components/controls/SelectAsync/SelectAsync.jsx","components/GroupForm/GroupForm.jsx","components/ListItem/ListItem.js","redax/actions/aplicants.js","components/ListAplicants/ListAplicants.jsx","components/SmalInfoUser/SmalInfoUser.jsx","components/ClientsChange/ClientsChange.jsx","components/ClientsChange/ClientsChangeHOC.js","components/AddFormAplicants/listCountry.js","components/AddFormAplicants/const.js","components/AddFormAplicants/AddFormAplicants.jsx","components/JsomShow/JsomShow.jsx","scenss/MainScens/MainScens.jsx","App.js","theme.js","Api/utils.js","Api/index.js","Api/Client.js","Api/Applicant.js","redax/reducers/aplicants.js","redax/reducers/users.js","redax/reducers/index.js","redax/store.js","index.js"],"names":["selectUser","userID","type","payload","useStyles","makeStyles","theme","root","margin","spacing","label","textTransform","Controls","Input","props","useField","field","meta","TextField","touched","error","helperText","RadioGroup","Props","items","FormControl","FormLabel","map","item","FormControlLabel","value","id","control","Radio","color","title","Fragment","Autocomlete","name","options","getOptionLabel","noOptionsText","variant","other","render","form","Autocomplete","onChange","e","setFieldValue","renderInput","params","component","SelectAsync","Button","children","size","onClick","classes","breakpoints","up","padding","marginBottom","marginTop","GroupForm","Paper","className","defaultProps","CustomListItem","key","dispatch","useDispatch","disabled","disable","Checkbox","checked","selected","changeSelectedAplicans","Typography","address","listText","fontSize","loader","ListAplicants","onChangeItem","useSelector","aplicants","newApplicants","isLoaded","FormGroup","IconButton","codeID","aria-label","CircularProgress","fontWeight","SmalInfoUser","phone","Component","withClientsChange","handleInputChange","showOptions","activeClient","loading","activeUser","users","option","loadingText","adrrees","email","useState","setShowOptions","setActiveClient","event","target","length","newValue","userInfo","R","getState","Api","getClientApplicants","then","results","tempArray","data","Country","typeUser","nameErrors","initialValues","code","country","EDRPOU","originalName","originalAddress","validChem","Yup","required","when","is","otherwise","maxWidth","inputBox","width","down","FormUser","values","row","wrapSelect","Grid","container","xs","md","AddFormAplicants","setShowAddForm","validationSchema","onSubmit","setSubmitting","uuid","JsomShow","state","filter","jsonObject","clienId","applicantsIds","push","style","overflow","JSON","stringify","MainScens","showAddForm","showJson","setShowJson","Container","endIcon","App","useEffect","getClients","createMuiTheme","palette","primary","main","apiRequest","axios","create","baseURL","authRequest","config","withAuthTokenConfig","mergeDeepLeft","headers","method","url","initialState","actions","aplicantIndex","findIndex","aplicant","rootReducer","combineReducers","usersReduser","aplicantsReduser","store","createStore","compose","applyMiddleware","thunk","withExtraArgument","window","__REDUX_DEVTOOLS_EXTENSION__","storeApp","ReactDOM","ThemeProvider","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.494db758.chunk.js","sourcesContent":["\nconst entryLoaded = users => ({ type: 'SET_USERS', payload: users })\n\nexport const requestUsers = () => {\n    return (dispatch, getState, Api) => {\n        Api.getClients()\n            .then(data => {\n\n                let tempArray = [];\n                tempArray = data.data.items.map((item) => {\n                    return {\n                        ...item,\n                        value: item.id\n                    }\n                })\n\n                dispatch(entryLoaded(tempArray));\n                return tempArray;\n            })\n    }\n}\n\nexport const selectUser = userID => ({ type: 'SELECT_USERS', payload: userID })\n","import React from 'react'\nimport { Button as MuiButton, makeStyles } from '@material-ui/core'\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        margin: theme.spacing(0.5)\n    },\n    label: {\n        textTransform: 'none'\n    }\n}))\n\nexport const Button = (props) => {\n\n    const { children, size, color, variant, onClick, ...other } = props;\n    const classes = useStyles()\n\n    return (\n        <MuiButton\n            variant={variant || \"contained\"}\n            size={size || \"large\"}\n            color={color || \"primary\"}\n            onClick={onClick}\n            {...other}\n            classes={{ root: classes.root, label: classes.label }}\n        >\n            {children}\n        </MuiButton>\n    )\n}\n","import { Input } from './Input/Input'\nimport { RadioGroup } from './RadioGroup/RadioGroup'\nimport { Autocomlete } from './Autocomplete/Autocomlete'\nimport { SelectAsync } from './SelectAsync/SelectAsync'\nimport { Button } from './Button/Button'\n\n const Controls = {\n    Input,\n    RadioGroup,\n    Autocomlete,\n    SelectAsync,\n    Button,\n}\n\nexport default Controls;","import {   TextField } from '@material-ui/core'\nimport { useField } from 'formik';\nimport React from 'react'\n\n \n\nexport const Input = ({  ...props }) => {\n    const [field, meta] = useField(props);\n    \n    return (\n        <TextField\n       \n            {...props}\n            {...field}\n            {...(meta.touched && meta.error && { error: true, helperText: meta.error })}\n        >\n        </TextField >\n    )\n}\n\n\n","import React from 'react'\nimport { FormControl, FormControlLabel, FormLabel, RadioGroup as MuiRadioGroup, Radio } from '@material-ui/core';\nimport { useField } from 'formik';\n\n\nexport const RadioGroup = (Props) => {\n\n    // const { name, label, onChange, items } = props;\n    const [field, meta] = useField(Props);\n     \n    const { label, items } = Props;\n\n    return (\n        <FormControl>\n            <FormLabel>{label}</FormLabel>\n            <MuiRadioGroup  {...field} {...Props}  >\n                {\n                    items.map(\n                        (item) => (\n                            <FormControlLabel key={item.id} value={item.id} control={<Radio color=\"primary\" />} label={item.title} />\n                        )\n                    )\n                }\n\n            </MuiRadioGroup>\n            {meta.touched && meta.error && (\n                <React.Fragment>{meta.error}</React.Fragment>\n            )}\n\n        </FormControl>\n    )\n}\n\n\n// const MyCheckbox = ({ children, ...props }) => {\n//     // React treats radios and checkbox inputs differently other input types, select, and textarea.\n//     // Formik does this too! When you specify `type` to useField(), it will\n//     // return the correct bag of props for you\n//     const [field, meta] = useField({ ...props, type: 'checkbox' });\n//     return (\n//         <div>\n//             <label className=\"checkbox\">\n//                 <input type=\"checkbox\" {...field} {...props} />\n//                 {children}\n//             </label>\n\n//             {meta.touched && meta.error ? (\n//                 <div className=\"error\">{meta.error}</div>\n//             ) : null}\n//         </div>\n//     );\n// };\n\n// const FormikRadioGroup = ({\n//     field,\n//     form: { touched, errors },\n//     name,\n//     options,\n//     ...props\n// }) => {\n\n//     return (\n//         <React.Fragment>\n//             <RadioGroup {...field} {...props} name={name}>\n//                 {options.map(option => (\n//                     <FormControlLabel value={option} control={<Radio />} label={option} />\n//                 ))}\n//             </RadioGroup>\n\n//             {touched[fieldName] && errors[fieldName] && (\n//                 <React.Fragment>{errors[fieldName]}</React.Fragment>\n//             )}\n//         </React.Fragment>\n//     );\n// };","import { TextField } from '@material-ui/core'\nimport { Autocomplete } from '@material-ui/lab';\n\nimport { Field } from 'formik';\n\nimport React from 'react'\n\nexport const Autocomlete = (props) => {\n    const { name, id, options, getOptionLabel, noOptionsText, variant, ...other } = props;\n   \n    return (\n        <Field\n            id={id}\n            name={name}\n            render={({ field, form, meta }) => {\n\n                return (\n                    <>\n                        <Autocomplete\n                            {...other}\n                            options={options}\n                            getOptionLabel={getOptionLabel}\n                            noOptionsText={noOptionsText}\n                            onChange={(e, value) => {\n                                form.setFieldValue(name, !!value && !!value.value ? value.value : '')\n                            }}\n                            renderInput={params => (\n                                <Field component={TextField} label=\"Вибір країни \"  {...params} variant={variant} {...(meta.touched && meta.error && { error: true, helperText: meta.error })} />\n                            )}\n                        />\n                    </>\n                )\n            }}\n\n        />\n\n\n    )\n}\n\n\n","import React from 'react'\n\nexport const SelectAsync = () => {\n    return (\n        <div>\n            \n        </div>\n    )\n}","import { makeStyles, Paper } from '@material-ui/core';\nimport propTypes from 'prop-types';\nimport React from 'react'\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        [theme.breakpoints.up('xs')]: {\n            padding: theme.spacing(2),\n            marginBottom: theme.spacing(2),\n            marginTop: theme.spacing(2),\n        },\n\n        [theme.breakpoints.up('sm')]: {\n            padding: theme.spacing(4),\n            margin: theme.spacing(4),\n        },\n    },\n    title: {\n        margin:0,\n        marginBottom:5\n    }\n}));\n\nexport const GroupForm = (Props) => {\n    const classes = useStyles();\n\n    const { children, title } = Props;\n    return (\n        <Paper className={classes.root} >\n            <h2 className={classes.title}>{title}</h2>\n            <div>{children}</div>\n        </Paper>\n    )\n}\n\nGroupForm.defaultProps = {\n    title: \"Назва тестова\",\n};\n\nGroupForm.propTypes = {\n    title: propTypes.string.isRequired,\n    children: propTypes.node.isRequired,\n}","import { Checkbox, FormControlLabel, Typography } from '@material-ui/core';\nimport React from 'react'\nimport { useDispatch } from 'react-redux';\nimport { changeSelectedAplicans } from '../../redax/actions/aplicants';\n\nexport const CustomListItem = ({ ...props }) => {\n\n    const { key, value, color, className, item } = props;\n    const dispatch = useDispatch()\n    const onChange = (id) => {\n        dispatch(changeSelectedAplicans(id));\n    }\n\n    return (\n        <FormControlLabel key={key} disabled={item.disable}\n            control={<Checkbox checked={item.selected} value={value} color={color} onChange={() => onChange(item.id)} />}\n            label={<Typography className={className} > <b>{item.name},</b> {item.address.address}</Typography>}\n        />\n    )\n}\n\n","\nexport const setAplicans = (item) => ({\n    type: 'SET_APLICANTS',\n    payload: item,\n})\nexport const changeSelectedAplicans = (item) => ({\n    type: 'CHANGE_SELECTED_APLICANTS',\n    payload: item,\n})\n\nexport const requestAplicans = id => (\n    (dispatch, getState, Api) => {\n\n        Api.getClientApplicants(id)\n            .then((results) => {\n                let tempArray = [];\n                tempArray = results.data.items.map(item => {\n                    return ({\n                        ...item,\n                        selected: false,\n                        disable: false,\n                    })\n                })\n\n                dispatch(setAplicans(tempArray));\n                return tempArray;\n            })\n    }\n)\n\nexport const addAplicans = (item) => ({\n    type: 'ADD_APLICANT',\n    payload: item,\n})\nexport const deleteAplicans = (item) => ({\n    type: 'DELETE_APLICANT',\n    payload: item,\n})","import { CircularProgress, FormGroup, IconButton, makeStyles } from '@material-ui/core'\nimport React from 'react'\n\nimport { CustomListItem } from './../ListItem/ListItem'\n\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteAplicans } from '../../redax/actions/aplicants';\n\nconst useStyles = makeStyles((theme) => ({\n    listText: {\n        [theme.breakpoints.up('xs')]: {\n            fontSize: '0.85rem'\n        },\n        [theme.breakpoints.up('sm')]: {\n            fontSize: '1rem'\n        },\n    },\n    loader:{\n        margin:\"10px\"\n    }\n}));\n\nconst ListAplicants = ({ ...props }) => {\n\n    const dispatch = useDispatch()\n    const classes = useStyles();\n    const { onChangeItem } = props\n    const { items, newApplicants, isLoaded } = useSelector(({ aplicants }) => aplicants)\n\n    const deteleateAplication = (id) => {\n        dispatch(deleteAplicans(id))\n    }\n\n    return (\n        <div>\n            {!isLoaded ?\n                <CircularProgress className={classes.loader} />\n                : (\n                    <FormGroup>\n                        {items.map(item => (\n                            <CustomListItem\n                                key={`${item.id}${item.name}`}\n                                color=\"primary\"\n                                onChange={onChangeItem}\n                                className={classes.listText}\n                                item={item}\n                            ></CustomListItem>\n                        ))}\n\n                        {newApplicants.map(item => {\n                            return (\n                                <div>\n                                    <CustomListItem\n                                        key={`${item.id}${item.name}`}\n                                        color=\"primary\"\n                                        onChange={onChangeItem}\n                                        className={classes.listText}\n                                        item={item}\n                                    ></CustomListItem>\n\n                                    <IconButton onClick={() => deteleateAplication(item.codeID)} aria-label=\"delete\" >\n                                        <DeleteIcon fontSize=\"small\" />\n                                    </IconButton>\n                                </div>\n                            )\n                        })}\n                    </FormGroup>\n\n\n                )}\n\n        </div>\n    )\n}\n\n\nexport default ListAplicants;","import React from 'react'\nimport propTypes from 'prop-types';\nimport { makeStyles, Typography } from '@material-ui/core';\n\n\nconst useStyles = makeStyles((theme) => ({\n    title:{\n        fontWeight:'bold'\n    }   \n}));\n\nexport const SmalInfoUser = (Props) => {\n    const classes = useStyles();\n\n    const {name,phone} = Props;\n    return (\n        <div  >\n            <Typography className={classes.title} component=\"h6\">{name}</Typography>\n            <Typography>Телефон: {phone}</Typography>\n        </div>\n    )\n}\n\nSmalInfoUser.defaultProps = {\n    name: \"Назва тестова\",\n    phone: \"Телефон. 0000000000\",\n};\n\nSmalInfoUser.propTypes = {\n    name: propTypes.string,\n    phone: propTypes.string,\n}","import React from 'react'\n\nimport { TextField } from '@material-ui/core';\nimport { Autocomplete } from '@material-ui/lab';\n\nimport { withClientsChange } from './ClientsChangeHOC';\nimport { SmalInfoUser } from '../SmalInfoUser/SmalInfoUser';\nimport { useSelector } from 'react-redux';\n\nexport const ClientsChange = ({ ...props }) => {\n    const { handleInputChange, showOptions, activeClient, options, loading, onChange } = props;\n\n    const { activeUser } = useSelector(({ users }) => users)\n\n    return (\n        <div >\n            <Autocomplete\n                loading={loading}\n                getOptionLabel={(option) => option.label}\n                noOptionsText={showOptions ? 'Нічого не знайдено' : 'Ведіть більше трьох символів'}\n                loadingText=\"Пошук клієнтів ....\"\n                renderInput={(params) => <TextField {...params} onChange={handleInputChange} label=\"Custom Search/Sections\" margin=\"normal\" />}\n                options={options}\n                onChange={onChange}\n            />\n\n            {!!activeUser && (\n                <SmalInfoUser name={activeClient.name} phone={activeClient.phone} adrrees={activeClient.email}></SmalInfoUser>\n            )}\n        </div>\n    )\n}\n\nexport default withClientsChange(ClientsChange);\n","import * as R from 'ramda'\nimport React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { requestAplicans } from '../../redax/actions/aplicants';\nimport { selectUser } from '../../redax/actions/users';\n\nexport const withClientsChange = Component => ({ ...props }) => {\n\n    const dispatch = useDispatch()\n    const { items, isLoaded } = useSelector(({ users }) => users)\n\n    const [showOptions, setShowOptions] = useState(false)\n    const [activeClient, setActiveClient] = useState();\n\n\n    function handleInputChange(event) {\n        const querySearch = event.target.value;\n        if (querySearch.length > 2) {\n            setShowOptions(true);\n        }\n    }\n\n    function onChangeClient(event, newValue) {\n        if (!!newValue) {\n\n            let userInfo = R.find(R.propEq('id', newValue.id))(items);\n            setActiveClient(userInfo);\n\n            dispatch(selectUser(newValue.id))\n            dispatch(requestAplicans(newValue.id))\n\n        } else {\n            dispatch(selectUser(''))\n            setActiveClient();\n        }\n    }\n\n    return (<Component\n        loading={!isLoaded}\n        options={showOptions ? items : []}\n        showOptions={showOptions}\n        activeClient={activeClient}\n        handleInputChange={handleInputChange}\n        onChange={onChangeClient}\n        {...props} />)\n\n};","export const Country = [\n    {\"title\": \"Польща\", \"value\": \"Poland\"},\n    {\"title\": \"Бельгія\", \"value\": \"Belgium\"},\n    {\"title\": \"Нідерланди\", \"value\": \"Netherlands\"},\n    {\"title\": \"Україна\", \"value\": \"Ukraine\"},\n    \n]","export const typeUser = [\n    { id: 'Individual', title: 'Фізична особа' },\n    { id: 'Legal', title: 'Юридична особа' },\n]\n\nexport const nameErrors = {\n    code: \"Виберіть тип платника подітків\",\n    country: \"Виберіть країну\",\n    EDRPOU: \"Виберіть Код ЕДРПОУ\",\n    name: \"Ведіть назву\",\n    address: \"Ведіть адресу\",\n    originalName: \"Ведіть назву мовою можодження\",\n    originalAddress: \"Ведіть адресу мовою можодження\",\n}\n","import { Grid, makeStyles, Typography } from '@material-ui/core'\n\nimport React from 'react'\nimport Controls from './../../components/controls';\nimport { Country } from './listCountry.js'\n\nimport { Formik, Form } from 'formik';\nimport * as Yup from 'yup';\n\nimport uuid from \"react-uuid\";\nimport { nameErrors, typeUser } from './const';\nimport { useDispatch } from 'react-redux';\nimport { addAplicans } from '../../redax/actions/aplicants';\n\n\nconst initialValues = {\n    code: \"Individual\",\n    country: \"\",\n    EDRPOU: \"\",\n    name: \"\",\n    address: \"\",\n    originalName: \"\",\n    originalAddress: \"\",\n}\n\n\nconst validChem = Yup.object({\n    code: Yup.string().required(nameErrors.code),\n    country: Yup.string().required(nameErrors.country),\n    name: Yup.string().required(nameErrors.name),\n    address: Yup.string().required(nameErrors.address),\n    originalAddress: Yup\n        .string()\n        .when(\"country\", {\n            is: \"Ukraine\",\n            then: \"\",\n            otherwise: Yup.string().required(nameErrors.originalAddress)\n        }),\n\n    originalName: Yup\n        .string()\n        .when(\"country\", {\n            is: \"Ukraine\",\n            then: \"\",\n            otherwise: Yup.string().required(nameErrors.originalAddress)\n        }),\n})\n\nconst useStyles = makeStyles((theme) => ({\n    form: {\n        marginTop: 10,\n        marginBottom: 20,\n        '& .MuiAutocomplete-root': {\n            maxWidth: 400\n        }\n    },\n\n    inputBox: {\n        maxWidth: \"90%\",\n        width: \"100%\",\n        marginTop: 5,\n        marginBottom: 5,\n\n        [theme.breakpoints.down('sm')]: {\n            maxWidth: \"100%\",\n        },\n    }\n}));\n\n\nexport const FormUser = ({ ...props }) => {\n    const classes = useStyles()\n    const { values } = props;\n\n    return (\n        <Form>\n            <Controls.RadioGroup\n                row\n                id=\"code\"\n                name=\"code\"\n                items={typeUser}\n\n            ></Controls.RadioGroup>\n            <Controls.Autocomlete\n                className={classes.wrapSelect}\n                id=\"country\"\n                name=\"country\"\n                options={Country}\n                getOptionLabel={(Country) => Country.title}\n                noOptionsText={'Ведіть країну'}\n                variant=\"standard\"\n            ></Controls.Autocomlete>\n            <Grid container >\n                <Grid item xs={12} md={6}>\n                    <Controls.Input\n                        className={classes.inputBox}\n                        id=\"EDRPOU\"\n                        label=\"ЕДРПОУ\"\n                        variant=\"standard\"\n                        name=\"EDRPOU\"\n                    ></Controls.Input>\n                    <Controls.Input\n                        className={classes.inputBox}\n                        id=\"name\"\n                        label=\"Назва\"\n                        variant=\"standard\"\n                        name=\"name\"\n                    ></Controls.Input>\n                    <Controls.Input\n                        className={classes.inputBox}\n                        id=\"address\"\n                        label=\"Адреса\"\n                        variant=\"standard\"\n                        name=\"address\"\n                    ></Controls.Input>\n                </Grid>\n\n                {!!values.country && values.country !== \"Ukraine\" && (\n                    <Grid item xs={12} md={6}>\n                        <Controls.Input\n                            className={classes.inputBox}\n                            label=\"Назва мови походження\"\n                            variant=\"standard\"\n                            name=\"originalName\"\n                        ></Controls.Input>\n                        <Controls.Input\n                            className={classes.inputBox}\n                            label=\"Адреса мовою походження\"\n                            variant=\"standard\"\n                            name=\"originalAddress\"\n                        ></Controls.Input>\n                    </Grid>\n                )}\n            </Grid>\n\n            <Controls.Button\n                type=\"submit\"\n                variant=\"outlined\"\n                color=\"primary\"\n            > Додати заявника</Controls.Button>\n        </Form>\n\n    )\n}\n\nexport const AddFormAplicants = (props) => {\n    const classes = useStyles()\n    const { setShowAddForm } = props;\n\n    const dispatch = useDispatch()\n\n    return (\n        <div className={classes.form} >\n            <Typography variant=\"h6\">Додати нового</Typography>\n            <Formik\n                initialValues={initialValues}\n                validationSchema={validChem}\n                onSubmit={(values, { setSubmitting }) => {\n                    values.codeID = uuid();\n                    values.selected = true;\n                    values.disable = true;\n                    dispatch(addAplicans(values));\n                    setShowAddForm(false);\n                }}\n                children={FormUser}\n\n            >\n            </Formik>\n\n        </div>\n    )\n}\n\n\n\n","import React from 'react'\nimport { useSelector } from 'react-redux'\n\n\n\n\nfunction JsomShow() {\n    const { users: { activeUser }, aplicants: { items, newApplicants } } = useSelector(state => state);\n\n    let tempArray = items.filter(item =>  item.selected === true ? item.id : null);\n    tempArray = tempArray.map(item=> item.id)\n    let jsonObject = { clienId: '', applicantsIds: [], newApplicants: [] }\n    jsonObject.clienId = activeUser;\n    jsonObject.applicantsIds = tempArray;\n    jsonObject.newApplicants.push(newApplicants);\n\n    const getJsonIndented = (data) => JSON.stringify(data, null, 2);\n\n    return (\n        <div>\n            <pre style={{ overflow: \"auto\" }} >{getJsonIndented(jsonObject)}</pre>\n        </div>\n    )\n}\n\nexport default JsomShow\n","import React, { useState } from 'react'\n\nimport { Button, Container, Grid } from '@material-ui/core'\nimport AddIcon from '@material-ui/icons/Add';\n\nimport Controls from '../../components/controls'\n\nimport { GroupForm } from '../../components/GroupForm/GroupForm'\nimport ListAplicants from '../../components/ListAplicants/ListAplicants'\nimport ClientsChange from '../../components/ClientsChange/ClientsChange'\nimport { AddFormAplicants } from '../../components/AddFormAplicants/AddFormAplicants'\nimport { useSelector } from 'react-redux';\nimport JsomShow from '../../components/JsomShow/JsomShow';\n\n\n\nexport const MainScens = () => {\n\n    const { activeUser } = useSelector(({ users }) => users)\n\n    const [showAddForm, setShowAddForm] = useState(false);\n    const [showJson, setShowJson] = useState(false);\n\n    const showForm = () => {\n        setShowAddForm(!showAddForm)\n    }\n\n    const formSubmit = () => {\n        setShowJson(!showJson)\n    }\n\n    return (\n        <div>\n            <Container maxWidth=\"md\">\n\n                <GroupForm title=\"Клієнт\" >\n                    <ClientsChange />\n                </GroupForm>\n\n                {!!activeUser && (\n                    <GroupForm title=\"Замовник\">\n                        <Grid container>\n                            <Grid container item xs={12}  >\n                                <ListAplicants />\n                            </Grid>\n                            <Grid item xs={12}  >\n                                <Button\n                                    variant=\"outlined\"\n                                    color=\"primary\"\n                                    endIcon={<AddIcon></AddIcon>}\n                                    onClick={showForm}\n                                    size=\"medium\"\n                                >\n                                    {!showAddForm ? 'Додати' : 'Cховати форму'}\n                                </Button>\n\n                                {!!showAddForm && <AddFormAplicants setShowAddForm={setShowAddForm} ></AddFormAplicants>}\n                            </Grid>\n                            <Grid container item xs={12}  >\n                                <Controls.Button onClick={formSubmit}>Зберегти заявку</Controls.Button>\n                            </Grid>\n                        </Grid>\n                    </GroupForm>\n                )}\n\n\n\n                {!!showJson && (<GroupForm title='Json запиту'>\n                    <JsomShow />\n                </GroupForm>)}\n\n            </Container>\n\n        </div >\n    )\n}\n","import React from 'react'\nimport { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport './App.css';\nimport { requestUsers } from './redax/actions/users';\nimport { MainScens } from './scenss/MainScens/MainScens';\n\n\n\n\nfunction App() {\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    dispatch(requestUsers())\n  }, [])\n\n  return (<MainScens />);\n}\n\nexport default App;\n","import { createMuiTheme } from \"@material-ui/core\";\n\n\n\n\n// const value in theme\nexport const paramsThem = {\n    color:{\n        main:'#2196f3'\n    }\n}\n\n\n\nexport const theme = createMuiTheme({\n    palette: {\n        primary:{\n            main: paramsThem.color.main\n        },\n    },\n});\n\n\n\n","import axios from 'axios';\nimport { mergeDeepLeft } from 'ramda';\n\n \nconst apiBaseUrl = 'https://lexberry.com.ua/api/v1';\nconst token = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE2MDc0NjEyMDMsImV4cCI6MTYxMDA1MzIwMywicm9sZXMiOlsiUk9MRV9BRE1JTiJdLCJ1c2VybmFtZSI6ImJ5Lmhhc2tlbGwifQ.F_0yZmAbIbPuonnXiKdxI9ne77y3CCFmoe-Wygp3wIgXShDoO64cnnTBsVQG6u6VUvZt1LrueXhUnbOmVKnbUTckKKkNcQWl6iHVO-9RgP2133SOzWcSmVDpf0BC_K0lczF0DaAmp1gHii-Ct50nORpSONSbWNnjkfhBIPbyLVDR2sKuGKyMGG-6Qy0JRDTFnt5AVO_z5HEpCYSrQdhwd_wl7gcD9-vH7_aQib9dq6htbDdqdFw1NXk84B_YTfa2szSFyMDuQkaTgXZwoOOouxEHy9JlJgkKgxK5W-f84cNFkFrYxUhxaNROgPFY8Cs9pB54NcVaSceQc2vF2lgtFb3VyC-ra3xTNtrNmzGPpikftkeU8lnojP8ifEsdeYWjgJGUa7HsR-VMq2fN9otGd0PqpXLpXPasBXEvub7tRyqLziGUG_h4SdgIOu0aGe3sItigzF3fnaCc-Vv8B1wM_qt05ahCgdMuMD7X2dW0eAFuO8zKZszz7owiD5S92QiJkI2sGUG5YzPTOPjch-Qoax--aM1QE8XFDvkDYCruARDTBxcqNp6QAdEANr_toscUpcwTM5-hNfSTGaWvF0dkJaek2PCCszOWAyz6TiLy9lGXVkFEGn-qeR9V0ecdHNx9F_6YNqgWAIOlMNCsYiNp77J6ggmLjJZfTYDh6BAwFNI'\n\nexport const apiRequest = axios.create({\n    baseURL: apiBaseUrl,\n});\n\nexport const authRequest = (config) => {\n\n    const withAuthTokenConfig = mergeDeepLeft(\n        config,\n        { headers: { \"Authorization\": `Bearer ${token}` } },\n    );\n\n    return apiRequest(withAuthTokenConfig);\n};\n","import {getClients}  from './Client';\nimport {getClientApplicants}  from './Applicant';\n\n \n const Api = {\n    getClients,\n    getClientApplicants,\n}\n\nexport default Api;","import { authRequest } from './utils';\n\nexport const getClients = () => {\n    return authRequest({\n        method: 'GET',\n        url: `/clients`,\n    });\n};","import { authRequest } from './utils';\n\nexport const getClientApplicants = (id) => {\n  return authRequest({\n    method: 'GET',\n    url: `/applicants?filter[client:id]=${id}`,\n  });\n};","const initialState = {\n    items: [],\n    newApplicants: [],\n    isLoaded: false,\n}\n\n\nconst aplicants = (state = initialState, actions) => {\n\n    if (actions.type === 'SET_APLICANTS') {\n        return {\n            ...state,\n            items: actions.payload,\n            isLoaded: true,\n        }\n    } else if (actions.type === 'CHANGE_SELECTED_APLICANTS') {\n        let aplicantIndex = state.items.findIndex(item => item.id === actions.payload);;\n        let tempArray = [...state.items];\n        tempArray[aplicantIndex].selected = !tempArray[aplicantIndex].selected\n\n        return {\n            ...state,\n            items: tempArray,\n        }\n    } else if (actions.type === 'ADD_APLICANT') {\n\n        const aplicant = actions.payload;\n        let tempArray = [...state.newApplicants];\n        tempArray.push(aplicant);\n        return {\n            ...state,\n            newApplicants: tempArray,\n        }\n    } else if (actions.type === 'DELETE_APLICANT') {\n\n        let tempArray = [];\n        tempArray = state.newApplicants.filter(item => {\n            return item.codeID !== actions.payload\n        })\n\n        return {\n            ...state,\n            newApplicants: tempArray,\n        }\n    }\n\n    return state;\n\n}\n\nexport default aplicants;\n","const initialState = {\n    items: [],\n    activeUser: '',\n    isLoaded: false,\n}\n\n\nconst users = (state = initialState, actions) => {\n \n    if (actions.type === 'SET_USERS') {\n        return {\n            ...state,\n            items: actions.payload,\n            isLoaded: true,\n        }\n    } else if (actions.type === 'SELECT_USERS') {\n        return {\n            ...state,\n            activeUser: actions.payload,\n        }\n    }\n\n    return state;\n\n}\n\nexport default users;","import { combineReducers } from 'redux';\nimport aplicantsReduser from './aplicants';\nimport usersReduser from './users';\n\n\n\nconst rootReducer = combineReducers({\n    users: usersReduser,\n    aplicants: aplicantsReduser,\n    // newApplicants:newApplicants\n})\n\n\nexport default rootReducer;\n ","import Api from '../Api';\nimport { applyMiddleware, compose, createStore } from 'redux'\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers'\n\n\nconst store = createStore(rootReducer, compose(applyMiddleware(thunk.withExtraArgument(Api)),\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n));\n\nexport default store;\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { CssBaseline, ThemeProvider } from '@material-ui/core';\nimport { theme } from './theme';\n\nimport store from './redax/store'\nimport { Provider } from 'react-redux'\n\nwindow.storeApp = store;\n\n\nReactDOM.render(\n  <ThemeProvider theme={theme}>\n    <Provider store={store}>\n\n      <App />\n    </Provider>\n    <CssBaseline></CssBaseline>\n  </ThemeProvider>\n  ,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}